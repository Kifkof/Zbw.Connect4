@rendermode InteractiveServer
@page "/"
@using MediatR
@using Game.Contract
@using Game.Contract.Commands
@using Game.Domain.GameProjections

@code {

    [Inject]
    private IMediator Mediator { get; set; } = null!;

    [Inject]
    private IGamesQuery GamesQuery { get; set; } = null!;

    private Guid? GameId { get; set; }

    public IReadOnlyList<GameSummary> Games { get; set; } = [];

    private async Task CreateGame()
    {
        Console.WriteLine("My debug output.");
        this.GameId = await this.Mediator.Send(new CreateGameCommand());
    }

    private async Task RenameGame()
    {
        if (this.GameId == null)
            return;

        await this.Mediator.Send(new UpdateGameNameCommand(new GameId(this.GameId.Value), "New Game Name"));
    }

    private async Task GetGames()
    {
        this.Games = await this.GamesQuery.GetAllGames();
    }

}

<PageTitle>Playground</PageTitle>

<h1>Current Game: @GameId</h1>

<MudButton @onclick="CreateGame">Create</MudButton>
<MudButton @onclick="RenameGame">Rename</MudButton>
<MudButton @onclick="GetGames">Show Games</MudButton>

<MudSimpleTable>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var game in this.Games)
        {
            <tr>
                <td>@game.Id</td>
                <td>@game.Name</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

